from dataclasses import dataclass
from typing import List, Dict, Optional, Any, Union
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
import asyncio
import logging

# Import MCP related modules
from mcp.client.session import ClientSession
from mcp.client.stdio import stdio_client, StdioServerParameters
from mcp.client.sse import sse_client, SseServerParameters
from mcp.types import Tool, ListToolsRequest, ListResourcesRequest, ListPromptsRequest

logger = logging.getLogger(__name__)

@dataclass
class ServerConfig:
    name: str
    transport_type: str  # 'stdio' or 'sse'
    # For stdio
    command: Optional[str] = None
    args: Optional[List[str]] = None
    env: Optional[Dict[str, str]] = None
    # For SSE
    url: Optional[str] = None
    headers: Optional[Dict[str, str]] = None
    timeout: Optional[int] = 30

@dataclass
class SessionData:
    session_id: str
    conversation_history: List[Dict[str, Any]]
    created_at: datetime
    last_activity: datetime

@dataclass
class MCPConnection:
    name: str
    session: ClientSession
    transport_type: str
    tools: List[Tool]
    resources: List[Any]
    prompts: List[Any]
    is_connected: bool = False
    transport_context: Any = None  # Store transport context for cleanup

class MCPClientManager:
    def __init__(self):
        self.connections: Dict[str, MCPConnection] = {}
        self.sessions: Dict[str, SessionData] = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self.event_queues: Dict[str, List[Dict]] = {}
        
    async def add_server(self, config: ServerConfig) -> bool:
        """Add and connect to an MCP server (supports both stdio and SSE)"""
        try:
            if config.transport_type.lower() == 'stdio':
                return await self._add_stdio_server(config)
            elif config.transport_type.lower() == 'sse':
                return await self._add_sse_server(config)
            else:
                logger.error(f"Unsupported transport type: {config.transport_type}")
                return False
                
        except Exception as e:
            logger.error(f"Failed to connect to MCP server {config.name}: {str(e)}")
            return False
    
    async def _add_stdio_server(self, config: ServerConfig) -> bool:
        """Add and connect to an MCP server using stdio transport"""
        try:
            # Validate stdio config
            if not config.command:
                raise ValueError("Command is required for stdio transport")
            
            # Create server parameters
            server_params = StdioServerParameters(
                command=config.command,
                args=config.args or [],
                env=config.env or {}
            )
            
            # Create stdio client
            stdio_transport = stdio_client(server_params)
            
            # Create session
            async with stdio_transport as (read, write):
                session = ClientSession(read, write)
                
                # Initialize the session
                await session.initialize()
                
                # Get server capabilities
                tools, resources, prompts = await self._get_server_capabilities(session)
                
                # Store connection
                self.connections[config.name] = MCPConnection(
                    name=config.name,
                    session=session,
                    transport_type='stdio',
                    tools=tools,
                    resources=resources,
                    prompts=prompts,
                    is_connected=True,
                    transport_context=stdio_transport
                )
                
                logger.info(f"Successfully connected to MCP server via stdio: {config.name}")
                return True
                
        except Exception as e:
            logger.error(f"Failed to connect to stdio MCP server {config.name}: {str(e)}")
            raise
    
    async def _add_sse_server(self, config: ServerConfig) -> bool:
        """Add and connect to an MCP server using SSE transport"""
        try:
            # Validate SSE config
            if not config.url:
                raise ValueError("URL is required for SSE transport")
            
            # Create server parameters
            server_params = SseServerParameters(
                url=config.url,
                headers=config.headers or {},
                timeout=config.timeout or 30
            )
            
            # Create SSE client
            sse_transport = sse_client(server_params)
            
            # Create session
            async with sse_transport as (read, write):
                session = ClientSession(read, write)
                
                # Initialize the session
                await session.initialize()
                
                # Get server capabilities
                tools, resources, prompts = await self._get_server_capabilities(session)
                
                # Store connection
                self.connections[config.name] = MCPConnection(
                    name=config.name,
                    session=session,
                    transport_type='sse',
                    tools=tools,
                    resources=resources,
                    prompts=prompts,
                    is_connected=True,
                    transport_context=sse_transport
                )
                
                logger.info(f"Successfully connected to MCP server via SSE: {config.name}")
                return True
                
        except Exception as e:
            logger.error(f"Failed to connect to SSE MCP server {config.name}: {str(e)}")
            raise
    
    async def _get_server_capabilities(self, session: ClientSession) -> tuple:
        """Get tools, resources, and prompts from the server"""
        tools = []
        resources = []
        prompts = []
        
        try:
            # Get available tools
            tools_response = await session.call_tool(ListToolsRequest())
            tools = tools_response.tools if hasattr(tools_response, 'tools') else []
        except Exception as e:
            logger.warning(f"Failed to get tools: {str(e)}")
        
        try:
            # Get available resources
            resources_response = await session.call_tool(ListResourcesRequest())
            resources = resources_response.resources if hasattr(resources_response, 'resources') else []
        except Exception as e:
            logger.warning(f"Failed to get resources: {str(e)}")
        
        try:
            # Get available prompts
            prompts_response = await session.call_tool(ListPromptsRequest())
            prompts = prompts_response.prompts if hasattr(prompts_response, 'prompts') else []
        except Exception as e:
            logger.warning(f"Failed to get prompts: {str(e)}")
        
        return tools, resources, prompts
    
    async def remove_server(self, server_name: str) -> bool:
        """Remove and disconnect from an MCP server"""
        try:
            if server_name not in self.connections:
                logger.warning(f"Server {server_name} not found")
                return False
            
            connection = self.connections[server_name]
            
            # Close the session
            if connection.session and connection.is_connected:
                try:
                    await connection.session.close()
                except Exception as e:
                    logger.warning(f"Error closing session for {server_name}: {str(e)}")
            
            # Clean up transport context if available
            if connection.transport_context:
                try:
                    # Handle context manager cleanup if needed
                    if hasattr(connection.transport_context, '__aexit__'):
                        await connection.transport_context.__aexit__(None, None, None)
                except Exception as e:
                    logger.warning(f"Error cleaning up transport for {server_name}: {str(e)}")
            
            # Remove from connections
            del self.connections[server_name]
            
            logger.info(f"Successfully disconnected from MCP server: {server_name}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to remove MCP server {server_name}: {str(e)}")
            return False
    
    def get_server_info(self, server_name: str) -> Optional[Dict[str, Any]]:
        """Get information about a connected server"""
        if server_name not in self.connections:
            return None
        
        connection = self.connections[server_name]
        return {
            'name': connection.name,
            'transport_type': connection.transport_type,
            'is_connected': connection.is_connected,
            'tools_count': len(connection.tools),
            'resources_count': len(connection.resources),
            'prompts_count': len(connection.prompts),
            'tools': [tool.name for tool in connection.tools],
            'resources': [res.uri if hasattr(res, 'uri') else str(res) for res in connection.resources],
            'prompts': [prompt.name if hasattr(prompt, 'name') else str(prompt) for prompt in connection.prompts]
        }
    
    def list_servers(self) -> List[str]:
        """List all connected server names"""
        return list(self.connections.keys())
    
    async def health_check(self, server_name: str) -> bool:
        """Check if a server connection is healthy"""
        if server_name not in self.connections:
            return False
        
        connection = self.connections[server_name]
        try:
            # Try to ping the server or list tools as a health check
            await connection.session.call_tool(ListToolsRequest())
            return True
        except Exception as e:
            logger.warning(f"Health check failed for {server_name}: {str(e)}")
            connection.is_connected = False
            return False

# Usage examples:
async def example_usage():
    manager = MCPClientManager()
    
    # Add stdio server
    stdio_config = ServerConfig(
        name="my-stdio-server",
        transport_type="stdio",
        command="python",
        args=["-m", "my_mcp_server"],
        env={"DEBUG": "1"}
    )
    
    # Add SSE server
    sse_config = ServerConfig(
        name="my-sse-server",
        transport_type="sse",
        url="http://localhost:8080/sse",
        headers={"Authorization": "Bearer token123"},
        timeout=60
    )
    
    # Connect to servers
    stdio_success = await manager.add_server(stdio_config)
    sse_success = await manager.add_server(sse_config)
    
    if stdio_success:
        print("Stdio server connected successfully")
        print(manager.get_server_info("my-stdio-server"))
    
    if sse_success:
        print("SSE server connected successfully")
        print(manager.get_server_info("my-sse-server"))
    
    # List all servers
    print("Connected servers:", manager.list_servers())
    
    # Health check
    for server_name in manager.list_servers():
        healthy = await manager.health_check(server_name)
        print(f"Server {server_name} health: {'OK' if healthy else 'FAILED'}")
    
    # Cleanup
    for server_name in manager.list_servers():
        await manager.remove_server(server_name)
